// Kadaneâ€™s Algorithm:

// Initialize:
//     max_so_far = INT_MIN
//     max_ending_here = 0

// Loop for each element of the array
//   (a) max_ending_here = max_ending_here + a[i]
//   (b) if(max_so_far < max_ending_here)
//             max_so_far = max_ending_here
//   (c) if(max_ending_here < 0)
//             max_ending_here = 0
// return max_so_far
class Solution {
public:
    int maxAscendingSum(vector<int>& nums) {
        int till =0 , m =0 ;
        if(nums.size()==1){
            return nums[0];
        }
        till = nums[0];
        for ( int i =1 ;i< nums.size() ;i++ ){
            if(nums[i]<=nums[i-1]){
                if(m<till) m = till ;

                till =0; 
            }
            till+=nums[i];
            cout<<till<<" ";
        }
       if(till> m)  m=till;
      return m  ;
    }
};